#!/usr/bin/env bash

error(){
    echo "$@" >&2;
    exit 1;
}

usage() {
    echo "Usage: $0 <action> [config_file]"
    echo 'Actions:'
    echo -e 'help\t\tPrint this usage'
    echo -e 'init\t\tInit incus project, network, storage, profiles'
    echo -e 'list\t\tList VMs'
    echo -e 'up\t\tInit then launch VMs'
    echo -e 'start\t\tStart VMs'
    echo -e 'stop\t\tStop VMs'
    echo -e 'delete\t\tDelete VMs and purge project, network, storage, profiles'
    echo -e "reset\t\t'delete' & 'up'"
}

# print usage first if requested
if [[ "$1" == "help" ]]; then
    usage
    exit 0
fi

if ! incus info > /dev/null ; then
    echo "Incus is not properly working. Exiting..."
    exit 1
fi

if command -v yq &>/dev/null; then
    #echo 'yq detected in $PATH'
    :
elif [ -x './yq' ]; then
    #echo 'Local yq detected'
    PATH="$PATH:$PWD"
else
    read -p "yq not installed. Do you want to install yq? Press Enter to continue (or type 'n' to skip): " answer
    if [[ "${answer}" != "n" ]]; then
        os_type=$(uname -s)
        if [[ "$os_type" == "Darwin" ]]; then
            echo "MacOS detected. Install yq with brew"
            brew install yq
        elif [[ "$os_type" == "Linux" ]]; then
            # Check for Arch Linux
            if [[ -f /etc/arch-release ]]; then
                echo 'Arch Linux detected. Install with pacman'
                sudo pacman -S yq
            else
                echo "Non-Arch Linux detected."
                read -p "Download script and install in /usr/local/bin (Requires sudo) ? Press n to install in cwd" global
                #Get latest version
                version=`curl https://api.github.com/repos/mikefarah/yq/releases/latest | grep '"tag_name":' | cut -d':' -f2 | sed 's/^.*\"\(.*\)\".*$/\1/g'`
                if [[ "${global}" != "n" ]]; then
                    sudo wget https://github.com/mikefarah/yq/releases/download/${version}/yq_linux_amd64 -O /usr/local/bin/yq && \
                    sudo chmod +x /usr/local/bin/yq
                else
                    wget https://github.com/mikefarah/yq/releases/download/${version}/yq_linux_amd64 -O ./yq && \
                    PATH="$PATH:$PWD"
                fi
            fi
        else
            error "yq not available and OS cannot be detected. Exiting"
        fi
    else
        error "Do not install. Quitting..."
    fi
fi

config_file=$2
if [[ -z "${config_file}" ]]; then
    config_file='./incus.yml'
fi

if [[ ! -f ${config_file} ]]; then
    echo "Config file (${config_file}) not found. Create it locally or set specific file as parameter" >&2
    usage
    exit 1
fi

parseconf(){
    query=$1
    default=$2
    if [[ -n "${default}" ]]; then
        if [[ ! "$default" =~ ^-?[0-9]+([.][0-9]+)?$ && "$default" != "true" && "$default" != "false" ]]; then
            default="\"${default}\""
        fi
        query="${query} // ${default}"
    fi
    yq "${query}" "${config_file}" | sed 's/"\(.*\)"/\1/g'
}

#variables extracted from incus config file
project=$(parseconf ".project")

if [[ "${project}" == "null" ]]; then
    error "'project' config key cannot be empty"
fi

hosts_num=$(parseconf '.hosts | length')

if [[ "$hosts_num" -lt 1 ]]; then
    error "Config must have at least one host"
fi

# Network
network_manage=$(parseconf '.network.manage' true)
network=$(parseconf '.network.name' "${project}br0")

# storage
storage_manage=$(parseconf '.storage.manage' true)
storage=$(parseconf '.storage.name' $project)


# Ansible
ansible_enabled=$(parseconf '.ansible.enabled' false)
inventory_file=$(parseconf '.ansible.inventory' './inventory/hosts.ini')

# SSH
ssh_enabled=$(parseconf '.ssh.enabled' ${ansible_enabled})
ssh_key=$(parseconf '.ssh.path' "./${project}_key")

# check if project exists
if ! incus project show $project  &>/dev/null; then
    incus project create $project
fi

incus project switch $project >/dev/null

get_hostvar() {
    hostname=$(parseconf ".hosts[$f].hostname")
    quantity=$(parseconf ".hosts[$f].quantity" 1)
    role=$(parseconf ".hosts[$f].role")
}

get_name() {
    if [[ "$hostname" == "null" ]]; then
        if [[ "$role" == "null" ]]; then
            error "host #${f} has no hostname nor a role. Quitting…"
        fi
        name=$(printf "%s-%02d" "$role" "$i")
    else
        if [[ "${qty}" -gt 1 && "$hostname" != *\$*d* ]]; then
            error "host #${f} has hostname without pattern and quantity > 1. Quitting…"
        fi
        name=$(printf "$hostname" "$i")
    fi
}

init() {
    if [[ "${ansible_enabled}" == "true" ]]; then
        if [[ "${ssh_enabled}" == "false" ]]; then
            error "'.ssh.enabled' cannot be false when 'ansible.enabled' is true"
        fi
        mkdir -p $(dirname "${inventory_file}")
    fi
    if [[ "${ssh_enabled}" == "true" && ! -f ${ssh_key} ]]; then
        mkdir -p $(dirname "${ssh_key}")
        echo "undetected ssh key. create it at ${ssh_key}"
        yes | ssh-keygen -t rsa -b 4096 -f ${ssh_key} -n ''
    fi
    if [[ "${network_manage}" == "true" ]]; then
        domain=$(parseconf '.network.domain' "$project")
        cidr=$(parseconf '.network.cidr'  '10.10.10.1/24')
        if ! incus network show $network &>/dev/null; then
            incus network create $network "ipv4.address=${cidr}" dns.domain=$domain ipv6.nat=false ipv6.address=none ipv4.nat=true
            if systemctl is-active --quiet systemd-resolved; then
                dnsip="${cidr%%/*}"
                echo "systemd-resolved is active. Configure DNS (${dnsip})"
                sudo resolvectl dns $network "${dnsip}"
                sudo resolvectl domain $network "~${domain}"
            else
                echo "systemd-resolved is not active. You have to configure your DNS resolution to contact nodes from their FQDN"
            fi
        fi
    else
        if ! incus network show $network &>/dev/null; then
            error "Network ${network} does not exists and set to network_manage=false. Create it manually or set network_manage to true"
        else
            domain=$(incus network show ${network} | yq '.config["dns.domain"]')
            cidr=$(incus network show ${network} | yq '.config["ipv4.address"]')
        fi
    fi
    if [[ "${storage_manage}" == "true" ]]; then
        # unless storage exists
        if ! incus storage show $storage &>/dev/null; then
            #create local dir storage
            storage_dir=`realpath $(parseconf '.storage.dir' './data/pool')`
            mkdir -p $storage_dir
            incus storage create ${storage} dir source=${storage_dir}
        fi
    fi
    # Default profiles (default)
    incus profile edit default <<-EOF
config: {}
description: Default Incus profile
devices:
  enp5s0:
    name: enp5s0
    nictype: bridged
    parent: $network
    type: nic
EOF

    if ! incus profile show vm &>/dev/null; then
        incus profile create vm
    fi

    #VM-only configuration
    incus profile edit vm <<-EOF
config: {}
description: VM profile
devices:
  agent:
    type: disk
    source: agent:config
EOF

    if ! incus profile show cloud  &>/dev/null; then
        incus profile create cloud
    fi

    #Cloud-init only VM configuration
    incus profile edit cloud <<-EOF
config: {}
description: Cloud-init profile
devices:
  cloud-init:
    type: disk
    source: cloud-init:config
name: cloud
EOF
}

up() {
    init
    #associative array (map)
    declare -A groups;
    #non-associative array (list)
    hosts_list=();

    image=$(parseconf '.image' 'rockylinux/8/cloud')
    admin_user=$(parseconf '.admin_user' 'admin')

    #Start Inventory file
    if [[ "${ansible_enabled}" == "true" ]]; then
        echo "#Generated by $0" > ${inventory_file}.tmp
        echo "" >> ${inventory_file}.tmp
    fi
    ssh_section=''
    if [[ "${ssh_enabled}" == "true" ]]; then
        ssh_section="
        ssh-authorized-keys:
          - $(cat ${ssh_key}.pub)"
    fi
    #foreach hosts_num
    for f in $(seq 0 $((hosts_num - 1))); do
        get_hostvar
        # parse config file to get host config
        memory=$(parseconf ".hosts[$f].memory // 512")
        cpu=$(parseconf ".hosts[$f].cpus // 1")
        root_size=$(parseconf ".hosts[$f].root_size // \"40GB\"")
        if yq -e ".hosts[$f].groups" ${config_file} &> /dev/null; then
            mapfile -t gr < <(parseconf ".hosts[$f].groups[]" 2>/dev/null)
        else
            if [[ "$role" == "null" ]]; then
                error "host #${f} has no groups nor role. Quitting…"
            fi
            gr=("$role")
        fi
        for i in $(seq 1 $quantity); do
            get_name
            f_gr=()
            for j in "${!gr[@]}"; do
                f_gr[$j]=$(printf ${gr[$j]} "$i")
            done
            if [[ "$ansible_enabled" == true ]]; then
                for g in ${f_gr[@]}; do
                    #Append host to group multiline string array
                    groups[$g]="${groups[$g]}\n$name"
                done;
                echo "$name ansible_ssh_host=$name.$domain ansible_ssh_user='$admin_user' domain=$domain" >> ${inventory_file}.tmp
            fi
            hosts_list+=("${name}")
            # launch host with following configuration
            incus launch images:$image $name --vm <<-EOF
architecture: x86_64
config:
  limits.memory: ${memory}MB
  limits.cpu: ${cpu}
  user.tdp-groups: "$(IFS=','; echo "${f_gr[*]}"; unset IFS)"
  user.user-data: |
    #cloud-config
    fqdn: ${name}.${domain}
    manage_etc_hosts: true
    package_update: true
    package_upgrade: true
    package_reboot_if_required: true
    packages:
      - chrony
      - firewalld
      - gzip
      - openssh-server
      - tar
      - vim
      - unzip
    write_files:
      - path: /etc/cloud/templates/hosts.redhat.tmpl
        content: |
          127.0.0.1 localhost.localdomain localhost
          127.0.0.1 localhost4.localdomain4 localhost4

          ::1 localhost.localdomain localhost
          ::1 localhost6.localdomain6 localhost6
      - path: /etc/ssh/sshd_config
        content: |
          # Set UsePAM to ssh on passwd-less account
          UsePAM yes
          # SFTP not working without sftp-server path
          Subsystem sftp /usr/libexec/openssh/sftp-server
        append: true
    runcmd:
      - [ systemctl, enable, sshd, --now ]
    users:
      - name: ${admin_user}
        sudo: ALL=(ALL) NOPASSWD:ALL${ssh_section}
        shell: /bin/bash
devices:
  root:
    path: /
    pool: ${storage}
    size: ${root_size}
    type: disk
name: $name
profiles:
  - default
  - cloud
  - vm
EOF
        done;
    done;

    if [[ "${ansible_enabled}" == true ]]; then
        echo -e "\n" >> ${inventory_file}.tmp
        for key in "${!groups[@]}"; do
            # generate ini section of current group (key)
            echo -e "[$key]${groups[$key]}\n" >> ${inventory_file}.tmp
        done
        #when finished, replace host file by tmp version
        echo 'Write finalized ansible hosts.ini file'
        mv ${inventory_file}.tmp ${inventory_file}
    fi
    echo 'Waiting completion of cloud-init...'
    echo 'If it hangs indefinitely, you might have network issue inside your VMs'
    for name in "${hosts_list[@]}"; do
        until incus exec ${name} -- cloud-init status | grep -q "status: done"; do
            sleep 3
        done
        echo "$name is ready"
    done
    echo ""
    echo 'Finished successfully!'
}

action() {
    for f in $(seq 0 $((hosts_num - 1))); do
        # parse config file to get host config
        get_hostvar
        #echo hostname $hostname mem $memory cpu $cpu quantity $quantity role $role gr $(IFS=','; echo "${gr[*]}"; unset IFS)
        for i in $(seq 1 $quantity); do
            get_name
            incus $@ $name
        done
    done
}

delete(){
    action delete --force;
    if [[ "${storage_manage}" == "true" ]]; then
        incus storage delete $storage
    fi
    if [[ "${network_manage}" == "true" ]]; then
        incus profile device remove default enp5s0
        incus network delete $network
    fi
}


case "$1" in
    init) init;;
    list) incus list;;
    up) up;;
    start) action start;;
    stop) action stop;;
    delete) delete;;
    reset) delete; up;;
    *) usage; exit 1;;
esac
