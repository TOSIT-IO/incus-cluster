#!/usr/bin/env bash

source "$(dirname $0)/incus_source.sh"

if [[ "${generate_ansible_inventory}" == "true" && ! -d "${ansible_dir}/inventory" ]]; then
    error "${ansible_dir} has no 'inventory' directory. Please initialize an ansible project at that path, or set 'generate_ansible_inventory' to false"
fi

if ! incus info > /dev/null ; then
    echo "Incus is not properly working. Exiting..."
    exit 1;
fi

#associative array (map)
declare -A groups;
#non-associative array (list)
hosts_list=();

# check if project exists
if ! incus project show $project  &>/dev/null; then
    incus project create $project
fi

incus project switch $project >/dev/null

if [[ "${generate_ansible_inventory}" == "true" ]]; then
    echo "#Generated by $0" > ${ansible_hosts_file}.tmp
    echo "" >> ${ansible_hosts_file}.tmp
    if [ ! -e ${private_key} ]; then
        echo "Undetected SSH key. Create it at ${private_key}"
        yes | ssh-keygen -t rsa -b 4096 -f ${private_key} -N ''
    fi
fi
if [ "${network_manage}" == "true" ]; then
    domain=$(parseconf ".network.domain // \"$project\"")
    cidr=$(parseconf '.network.cidr // "10.10.10.1/24"')
    if ! incus network show $network &>/dev/null; then
        incus network create $network "ipv4.address=${cidr}" dns.domain=$domain ipv6.nat=false ipv6.address=none ipv4.nat=true
        if systemctl is-active --quiet systemd-resolved; then
            dnsip="${cidr%%/*}"
            echo "systemd-resolved is active. Configure DNS (${dnsip})"
            sudo resolvectl dns $network "${dnsip}"
            sudo resolvectl domain $network "~${domain}"
        else
            echo "systemd-resolved is not active. You have to configure your DNS resolution to contact nodes from their FQDN"
        fi
    fi
else
    if ! incus network show $network &>/dev/null; then
        error "Network ${network} does not exists and set to network_manage=false. Create it manually or set network_manage to true"
    else
        domain=$(incus network show ${network} | ${_yq} '.config["dns.domain"]')
        cidr=$(incus network show ${network} | ${_yq} '.config["ipv4.address"]')
    fi
fi

# unless storage exists
if [[ "${storage_manage}" == "true" ]]; then
    if ! incus storage show $storage &>/dev/null; then
        #create local dir storage
        storage_dir=`realpath $(parseconf '.storage.dir // "./data/pool"')`
        mkdir -p $storage_dir
    	incus storage create ${storage} dir source=${storage_dir}
    fi
fi

# Default profiles (default)
incus profile edit default <<-EOF
config: {}
description: Default Incus profile
devices:
  enp5s0:
    name: enp5s0
    nictype: bridged
    parent: $network
    type: nic
EOF

if ! incus profile show vm &>/dev/null; then
    incus profile create vm
fi

#VM-only configuration
incus profile edit vm <<-EOF
config: {}
description: VM profile
devices:
  agent:
    type: disk
    source: agent:config
EOF

if ! incus profile show cloud  &>/dev/null; then
    incus profile create cloud
fi

#Cloud-init only VM configuration
incus profile edit cloud <<-EOF
config: {}
description: Cloud-init profile
devices:
  cloud-init:
    type: disk
    source: cloud-init:config
name: cloud
EOF

#foreach hosts_num
for f in $(seq 0 $((hosts_num - 1))); do
    # parse config file to get host config
    hostname=$(parseconf ".hosts[$f].hostname")
    memory=$(parseconf ".hosts[$f].memory // 512")
    cpu=$(parseconf ".hosts[$f].cpus // 1")
    quantity=$(parseconf ".hosts[$f].quantity // 1")
    role=$(parseconf ".hosts[$f].role")
    root_size=$(parseconf ".hosts[$f].root_size // \"40GB\"")
    if ${_yq} -e ".hosts[$f].groups" ${config_file} &> /dev/null; then
        mapfile -t gr < <(parseconf ".hosts[$f].groups[] // \"\"" 2>/dev/null)
    else
        gr=("$role")
    fi
    #echo hostname $hostname mem $memory cpu $cpu quantity $quantity role $role gr $(IFS=','; echo "${gr[*]}"; unset IFS)
    if [ -z "$role" ]; then
        error 'memory, cpu, and role are mandatory vars'
    fi
    if [[ "$quantity" == "null" ]]; then
       quantity=1
    fi
    for i in $(seq 1 $quantity); do
        if [[ "$hostname" == "null" ]]; then
            name=$(printf "%s-%02d" "$role" "$i")
        else
            name=$(printf "$hostname" "$i")
        fi
        f_gr=()
        for j in "${!gr[@]}"; do
            f_gr[$j]=$(printf ${gr[$j]} "$i")
        done
        for g in ${f_gr[@]}; do
            echo "should add '${name}' to groups[$g]"
            #Append host to group multiline string array
            groups[$g]="${groups[$g]}\n$name"
        done;
        if [[ "${generate_ansible_inventory}" == true ]]; then
            # add host to inventory
            echo "$name ansible_ssh_host=$name.$domain ansible_ssh_user='$admin_user' domain=$domain" >> ${ansible_hosts_file}.tmp
        fi
        hosts_list+=("${name}")
        # launch host with following configuration
        incus launch images:$image $name --vm <<-EOF
architecture: x86_64
config:
  limits.memory: ${memory}MB
  limits.cpu: ${cpu}
  user.tdp-groups: "$(IFS=','; echo "${gri[*]}"; unset IFS)"
  user.user-data: |
    #cloud-config
    fqdn: ${name}.${domain}
    manage_etc_hosts: true
    package_update: true
    package_upgrade: true
    package_reboot_if_required: true
    packages:
      - chrony
      - firewalld
      - gzip
      - openssh-server
      - tar
      - vim
      - unzip
    write_files:
      - path: /etc/cloud/templates/hosts.redhat.tmpl
        content: |
          127.0.0.1 localhost.localdomain localhost
          127.0.0.1 localhost4.localdomain4 localhost4

          ::1 localhost.localdomain localhost
          ::1 localhost6.localdomain6 localhost6
      - path: /etc/ssh/sshd_config
        content: |
          # Set UsePAM to ssh on passwd-less account
          UsePAM yes
          # SFTP not working without sftp-server path
          Subsystem sftp /usr/libexec/openssh/sftp-server
        append: true
    runcmd:
      - [ systemctl, enable, sshd, --now ]
    users:
      - name: ${admin_user}
        sudo: ALL=(ALL) NOPASSWD:ALL
        ssh-authorized-keys:
          - $(cat ${private_key}.pub)
        shell: /bin/bash
devices:
  root:
    path: /
    pool: ${storage}
    size: ${root_size}
    type: disk
name: $name
profiles:
  - default
  - cloud
  - vm
EOF
    done;
done;

if [[ "${generate_ansible_inventory}" == true ]]; then
    echo -e "\n" >> ${ansible_hosts_file}.tmp
    for key in "${!groups[@]}"; do
        # generate ini section of current group (key)
        echo -e "[$key]${groups[$key]}\n" >> ${ansible_hosts_file}.tmp
    done

    #when finished, replace host file by tmp version
    echo 'Write finalized ansible hosts.ini file'
    mv ${ansible_hosts_file}.tmp ${ansible_hosts_file}
fi

echo 'Waiting completion of cloud-init...'
echo 'If it hangs indefinitely, you might have network issue inside your VMs'
for name in "${hosts_list[@]}"; do
    until incus exec ${name} -- cloud-init status | grep -q "status: done"; do
        sleep 3
    done
    echo "$name is ready"
done

echo ""
echo 'Finished successfully!'
