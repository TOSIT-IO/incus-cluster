#!/usr/bin/env bash

cd "$(dirname "$0")"

source ./source.sh

if [ ! -d "${output_dir}/inventory" ]; then
    error "${output_dir} is not a valid tdp project directory. Please initialize a TDP project at that path, or override 'output_dir'"
fi

#associative array (map)
declare -A groups;
#non-associative array (list)
hosts_list=();

# check project exists
if ! incus project show $project  &>/dev/null; then
    incus project create $project
fi

incus project switch $project >/dev/null

if [ ! -e ${private_key} ]; then
    echo "Undetected SSH key. Create it at ${private_key}"
    yes | ssh-keygen -t rsa -b 4096 -f ${private_key} -N ''
fi

echo '#Generated by tdp-incus/launch.sh' > ${ansible_hosts_file}.tmp
echo "" >> ${ansible_hosts_file}.tmp

# check network exists and is a bridge
if [ "${network_manage}" == "true" ]; then
    domain=$(parseconf '.network.domain // "tdp"')
    cidr=$(parseconf '.network.cidr // "10.10.10.1/24"')
    if ! incus network show $network 2>&1 >/dev/null; then
        incus network create $network "ipv4.address=${cidr}" dns.domain=$domain ipv6.nat=false ipv6.address=none ipv4.nat=true
    fi
else
    if ! incus network show $network 2>&1 >/dev/null; then
        error "Network ${network} does not exists and set to manage=false. Create it manually or set manage to true"
    else
        domain=$(incus network show ${network} | ${_yq} '.config["dns.domain"]')
        cidr=$(incus network show ${network} | ${_yq} '.config["ipv4.address"]')
    fi
fi

# unless tdp storage exists
if [ "${storage_manage}" == "true" ]; then
    if ! incus storage show $storage 2>&1 >/dev/null; then
        #create local dir storage
        storage_dir=`realpath $(parseconf '.storage.dir // "./data/pool"')`
        mkdir -p $storage_dir
    	incus storage create ${storage} dir source=${storage_dir}
    fi
fi

# Default profiles (default)
incus profile edit default <<-EOF
config: {}
description: Default Incus profile
devices:
  agent:
    type: disk
    source: agent:config
  enp5s0:
    name: enp5s0
    nictype: bridged
    parent: $network
    type: nic
  root:
    path: /
    pool: ${storage}
    size: ${root_size}
    type: disk
name: default
EOF

if ! incus profile show cloud  2>&1 >/dev/null; then
    incus profile create cloud
fi

incus profile edit cloud <<-EOF
config: {}
description: Cloud-init Incus profile
devices:
  cloud-init:
    type: disk
    source: cloud-init:config
name: cloud
EOF

# #foreach hosts_num
# for profile in $(parseconf '.profiles | keys[]'); do
#     echo toto $key;
#     if ! incus profile show $profile; then
#         incus profile create $profile
#     fi
#     filter="  .profiles[].devices |=
#         map_values(
#           if .type == null then
#             .type = \"disk\" |
#             (if .pool == null then .pool = \"${storage}\" else . end)
#           elif .type == \"disk\" and .pool == null then
#             .pool = \"${storage}\"
#           else
#             .
#           end
#         )"
#     echo -e $filter
#     ${_yq} -y "${filter} | .profiles.${profile}" incus.yml > tutu.yml
#     # | incus profile edit $profile
#     exit 1
# done

#foreach hosts_num
for f in $(seq 0 $((hosts_num - 1))); do
    # parse config file to get host config
    hostname=$(parseconf ".hosts[$f].hostname")
    memory=$(parseconf ".hosts[$f].memory")
    cpu=$(parseconf ".hosts[$f].cpus")
    quantity=$(parseconf ".hosts[$f].quantity")
    role=$(parseconf ".hosts[$f].role")
    gr=$(parseconf ".hosts[$f].groups[]" 2>/dev/null)
    #echo hostname $hostname mem $memory cpu $cpu quantity $quantity role $role gr $(IFS=','; echo "${gr[*]}"; unset IFS)
    if [ -z "$memory" ] || [ -z "$cpu" ] || [ -z "$role" ]; then
        error 'memory, cpu, and role are mandatory vars'
    fi
    if [[ "$quantity" == "null" ]]; then
       quantity=1
    fi
    if [ ${#gr[@]} -eq 0 ] || [[ ${gr[0]} == "" ]]; then
        declare -A gr;
        gr[0]="$role"
    fi
    if [ "$quantity" -gt 1 ]; then
        if [ "$hostname" != "null" ]; then
            error "Cannot have both quantity > 1 ($quantity) and hostname specified ($hostname)"
        fi
    fi
    for i in $(seq 1 $quantity); do
        if [[ "$hostname" == "null" ]]; then
            name=$(printf "%s-%02d" "$role" "$i")
        else
            name=$hostname
        fi
        for g in ${gr[@]}; do
            #Append host to group multiline string array
            groups[$g]="${groups[$g]}\n$name"
        done;
        # add host to inventory
        echo "$name ansible_ssh_host=$name.$domain ansible_ssh_user='$admin_user' domain=$domain" >> ${ansible_hosts_file}.tmp
        hosts_list+=("${name}")
        # launch host with following configuration
        incus launch images:$image $name --vm <<-EOF
config:
  limits.memory: ${memory}MB
  #limits.cpu: ${cpu}
  user.tdp-groups: "$(IFS=','; echo "${gr[*]}"; unset IFS)"
  user.user-data: |
    #cloud-config
    fqdn: ${name}.${domain}
    manage_etc_hosts: true
    package_update: true
    package_upgrade: true
    package_reboot_if_required: true
    packages:
      - chrony
      - firewalld
      - openssh-server
      - tar
      - vim
      - unzip
    write_files:
      - path: /etc/cloud/templates/hosts.redhat.tmpl
        content: |
          127.0.0.1 localhost.localdomain localhost
          127.0.0.1 localhost4.localdomain4 localhost4

          ::1 localhost.localdomain localhost
          ::1 localhost6.localdomain6 localhost6
      - path: /etc/ssh/sshd_config
        content: |
          # Set UsePAM to ssh on passwd-less account
          UsePAM yes
          # SFTP not working without sftp-server path
          Subsystem sftp /usr/libexec/openssh/sftp-server
        append: true
    runcmd:
      - [ systemctl, enable, sshd, --now ]
    users:
      - name: ${admin_user}
        sudo: ALL=(ALL) NOPASSWD:ALL
        ssh-authorized-keys:
          - $(cat ${private_key}.pub)
        shell: /bin/bash
name: $name
architecture: x86_64
profiles:
  - default
  - cloud
EOF
    done;
done;

echo -e "\n" >> ${ansible_hosts_file}.tmp
for key in "${!groups[@]}"; do
    # generate ini section of current group (key)
    echo -e "[$key]${groups[$key]}\n" >> ${ansible_hosts_file}.tmp
done

#when finished, replace host file by tmp version
echo 'Write finalized ansible hosts.ini file'
mv ${ansible_hosts_file}.tmp ${ansible_hosts_file}

echo 'Waiting completion of cloud-init...'
echo 'If it hangs indefinitely, you might have network issue inside your VMs'
for name in "${hosts_list[@]}"; do
    until incus exec ${name} -- cloud-init status | grep -q "status: done"; do
        sleep 3
    done
    echo "$name is ready"
done

echo ""
echo 'Finished successfully!'
